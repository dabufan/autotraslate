// src/shared/prefs.ts
var defaultLang = (() => {
  try {
    const lang = navigator.language || navigator.userLanguage;
    if (typeof lang === "string" && lang.length) {
      return lang.split("-")[0];
    }
  } catch {
  }
  return "en";
})();
var DEFAULT_PREFS = {
  targetLang: defaultLang,
  autoTranslate: true,
  siteModes: {},
  provider: {
    type: "qwen",
    baseUrl: "https://dashscope.aliyuncs.com",
    apiKey: "",
    model: "qwen-turbo"
  },
  glossary: { pairs: [], protect: [] }
};
function withPrefDefaults(partial) {
  const provider = partial?.provider ? { ...partial.provider } : { ...DEFAULT_PREFS.provider };
  const glossaryPairs = partial?.glossary?.pairs ? partial.glossary.pairs.filter((pair) => !!pair && typeof pair.src === "string" && typeof pair.tgt === "string").map((pair) => ({ src: pair.src, tgt: pair.tgt })) : [];
  const glossaryProtect = partial?.glossary?.protect ? partial.glossary.protect.filter((item) => typeof item === "string") : [];
  return {
    targetLang: (partial?.targetLang || DEFAULT_PREFS.targetLang).trim() || DEFAULT_PREFS.targetLang,
    autoTranslate: partial?.autoTranslate ?? DEFAULT_PREFS.autoTranslate,
    siteModes: partial?.siteModes ? { ...partial.siteModes } : {},
    provider,
    glossary: {
      pairs: glossaryPairs,
      protect: glossaryProtect
    }
  };
}

// src/options/options.ts
function getPrefs() {
  return new Promise(
    (resolve) => chrome.storage.sync.get(["prefs"], (res) => {
      resolve(withPrefDefaults(res?.prefs));
    })
  );
}
function setPrefs(p) {
  const payload = withPrefDefaults(p);
  return new Promise((resolve) => chrome.storage.sync.set({ prefs: payload }, () => resolve()));
}
function show(el, on) {
  el.classList.toggle("hidden", !on);
}
function parsePairs(raw) {
  const lines = raw.split(/\r?\n/).map((s) => s.trim()).filter(Boolean);
  const out = [];
  for (const ln of lines) {
    const m = ln.split("=");
    if (m.length >= 2) out.push({ src: m[0].trim(), tgt: m.slice(1).join("=").trim() });
  }
  return out;
}
function parseProtect(raw) {
  return raw.split(/[\n,]/).map((s) => s.trim()).filter(Boolean);
}
(async function() {
  const targetLang = document.getElementById("targetLang");
  const autoTranslate = document.getElementById("autoTranslate");
  const provRadios = Array.from(document.querySelectorAll('input[name="provider"]'));
  const qwFields = document.getElementById("qwenFields");
  const dsFields = document.getElementById("deepseekFields");
  const lbFields = document.getElementById("libreFields");
  const qwBaseUrl = document.getElementById("qwBaseUrl");
  const qwApiKey = document.getElementById("qwApiKey");
  const qwModel = document.getElementById("qwModel");
  const dsBaseUrl = document.getElementById("dsBaseUrl");
  const dsApiKey = document.getElementById("dsApiKey");
  const dsModel = document.getElementById("dsModel");
  const lbBaseUrl = document.getElementById("lbBaseUrl");
  const lbApiKey = document.getElementById("lbApiKey");
  const glossaryPairs = document.getElementById("glossaryPairs");
  const protectTerms = document.getElementById("protectTerms");
  const saved = document.getElementById("saved");
  const prefs = await getPrefs();
  targetLang.value = prefs.targetLang || "";
  autoTranslate.checked = !!prefs.autoTranslate;
  const providerType = prefs.provider?.type || "qwen";
  provRadios.forEach((r) => r.checked = r.value === providerType);
  show(qwFields, providerType === "qwen");
  show(dsFields, providerType === "deepseek");
  show(lbFields, providerType === "libre");
  if (providerType === "qwen") {
    const p = prefs.provider;
    qwBaseUrl.value = p.baseUrl || "https://dashscope.aliyuncs.com";
    qwApiKey.value = p.apiKey || "";
    qwModel.value = p.model || "qwen-turbo";
  } else if (providerType === "deepseek") {
    const p = prefs.provider;
    dsBaseUrl.value = p.baseUrl || "https://api.deepseek.com";
    dsApiKey.value = p.apiKey || "";
    dsModel.value = p.model || "deepseek-chat";
  } else {
    const p = prefs.provider;
    lbBaseUrl.value = p.baseUrl || "https://libretranslate.com";
    lbApiKey.value = p.apiKey || "";
  }
  glossaryPairs.value = (prefs.glossary?.pairs || []).map((p) => `${p.src}=${p.tgt}`).join("\n");
  protectTerms.value = (prefs.glossary?.protect || []).join(", ");
  provRadios.forEach((r) => r.addEventListener("change", () => {
    const chosen = document.querySelector('input[name="provider"]:checked').value;
    show(qwFields, chosen === "qwen");
    show(dsFields, chosen === "deepseek");
    show(lbFields, chosen === "libre");
  }));
  document.getElementById("save").addEventListener("click", async () => {
    const chosen = document.querySelector('input[name="provider"]:checked').value;
    let provider;
    if (chosen === "qwen") {
      provider = {
        type: "qwen",
        baseUrl: (qwBaseUrl.value || "https://dashscope.aliyuncs.com").trim(),
        apiKey: (qwApiKey.value || "").trim(),
        model: (qwModel.value || "qwen-turbo").trim()
      };
    } else if (chosen === "deepseek") {
      provider = {
        type: "deepseek",
        baseUrl: (dsBaseUrl.value || "https://api.deepseek.com").trim(),
        apiKey: (dsApiKey.value || "").trim(),
        model: (dsModel.value || "deepseek-chat").trim()
      };
    } else {
      provider = {
        type: "libre",
        baseUrl: (lbBaseUrl.value || "https://libretranslate.com").trim(),
        apiKey: lbApiKey.value || void 0 || void 0
      };
    }
    const glossary = {
      pairs: parsePairs(glossaryPairs.value),
      protect: parseProtect(protectTerms.value)
    };
    const next = {
      targetLang: (targetLang.value || "en").trim(),
      autoTranslate: autoTranslate.checked,
      provider,
      siteModes: prefs.siteModes || {},
      glossary
    };
    await setPrefs(next);
    saved.textContent = "\u5DF2\u4FDD\u5B58";
    setTimeout(() => saved.textContent = "", 1500);
  });
})();
//# sourceMappingURL=data:application/json;base64,
